//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
//DO NOT EDIT THIS FILE: YOUR CHANGES WILL SIMPLY BE OVERWRITTEN
package blezerbot;
import battlecode.common.*;
import java.util.*;

public strictfp class RobotPlayer {


    public static void run(RobotController rc) throws GameActionException {
        RobotPlayer.rc = rc;
        startLife();

        while (true) {
            startTurn();



            try {
                switch (robot_types[type]) { case MINER: runMiner();break;
case LANDSCAPER: runLandscaper();break;
case DELIVERY_DRONE: runDeliveryDrone();break;
case REFINERY: runRefinery();break;
case VAPORATOR: runVaporator();break;
case DESIGN_SCHOOL: runDesignSchool();break;
case FULFILLMENT_CENTER: runFulfillmentCenter();break;
case NET_GUN: runNetGun();break;
case HQ: runHq();break;
 }
                endTurn();
                System.out.println("Yield...");
                Clock.yield();
            } catch (Exception e) {
                System.out.println(robot_types[type] + " Exception");
                e.printStackTrace();
            }
        }
    }
    static void processMessage(Transaction t) {
        //Check if the message was made by my team
        //The way it works: xor all of them with PAD
        //Then convert into 224 bits and do a 0-checksum with 8 blocks of 28 bits.
        int[] message = t.getMessage();

        System.out.println("Message Being Processed");
        int[] m = new int[7];
        for(int i=0; i<7; i++){
            m[i] = message[i]^PADS[i];
        }

        boolean bits[] = new boolean[224];
        boolean checksum[] = new boolean[28];
        int ptr = 0;    //This is a local ptr for reading a message, different than messagePtr (which is for writing)
        for(int i=0; i<message.length; i++){
            for(int j=31; j>=0; j--){
                bits[ptr] = 1==((m[i] >> j)&1);
                checksum[ptr%28] ^= bits[ptr];
                ptr++;
            }
        }
        int res = 0;
        for(int i=0; i<28; i++){
            if(checksum[i]){
                res ++;
            }
        }

        if (res != 0) { //Checksum failed, message made for the enemy
            enemy_msg_cnt++;
            enemy_msg_sum += t.getCost();
            //May want to store enemy messages here to find patterns to spread misinformation... ;)
            return;
        }

        ptr = 0;
        while(ptr <= 191){   //195-4
            int id = getInt(bits, ptr, 4);
            ptr += 4;
            if(id==0){ //0000 Set our HQ
                if(ptr >= 184){ //Requires 2 6-bit integers
                    System.out.println("Message did not exit properly");
                    return;
                }
                int x = getInt(bits, ptr, 6);
                if(x==0)x=64;
                ptr += 6;
                int y = getInt(bits, ptr, 6);
                if(y==0)x=64;
                ptr += 6;
                locHQ = new MapLocation(x,y);
                System.out.println("Now I know that my HQ is at" + locHQ);
            }else if(id==1){
                if(ptr >= 177){
                    System.out.println("Message did not exit properly");
                    return;
                }
                if(type == 0){//Only HQ keeps track of other units
                    int unit_type = getInt(bits, ptr, 4);
                    ptr += 4;
                    int unit_id = getInt(bits, ptr, 15);
                    ptr += 15;
                    units.get(unit_type).add(new Unit(unit_type, unit_id));
                    System.out.println("Added unit" + new Unit(unit_type,unit_id));
                }else{
                    ptr += 19;
                }
            }
            else if(id==15){    //1111 Message terminate
                return;
            }
        }
        System.out.println("Message did not exit properly");  //Should've seen 1111.
        return;
}

static int getInt(boolean[] bits, int ptr, int size){
        /*Turns the next <size> bits into an integer from 0 to 2**size-1. Does not modify ptr.*/
        int x = 0;
        for(int i=0; i<size; i++){
            x *= 2;
            if(bits[ptr+i]) x++;
        }
        return x;
}

static void writeInt(int x, int size){
        /*Writes the next <size> bits of currMessage with an integer 0 to 2**size-1. Modifies messagePtr.*/
        for(int i=size-1; i>=0; i--){
            currMessage[messagePtr] = 1==((x>>i)&1);
            messagePtr++;
        }
        return;
}

static void resetMessage(){
    //Resets currMessage to all 0's, and messagePtr to 0.
        messagePtr = 0;
        currMessage = new boolean[224];
        return;
}

static void writeMessage(int id, int[] params){
    /*Writes a command into currMessage. Will not do anything if it does not leave 4 bits for message end
      and the 28 bit checksum. This means it can only write up to (but not including) bit 192 (index 191).
     */
        if(id==0){ //0000 Set our HQ
            if(messagePtr >= 176){ //Requires id + 2 6-bit integers
                addMessageToQueue(base_wager);
            }
            writeInt(id, 4);
            writeInt(params[0], 6);
            writeInt(params[1], 6);
        }if(id==1){ //0000 Set our HQ
            if(messagePtr >= 169){ //Requires id + 4-bit int + 15-bit int
                addMessageToQueue(base_wager);
            }
            writeInt(id, 4);
            writeInt(params[0], 4);
            writeInt(params[1], 15);
        }
        return;
}

static void addMessageToQueue(){
    addMessageToQueue(base_wager);
}

static void addMessageToQueue(int wager){
    /*Does the following
        Writes the 1111 message end
        Sets the last 28 bits to meet the checksum
        Condenses it into 7 32-bit integers
        Applies the pad
        Adds transaction to messageQueue
        resetMessage();

        Returns true if successful
     */
        writeInt(15, 4);

        boolean checksum[] = new boolean[28];
        for(int i=0; i<196; i++){
            checksum[i%28] ^= currMessage[i];
        }
        for(int i=0; i<28; i++){
            currMessage[i+196] = checksum[i];
        }

        int[] words = new int[7];
        int ptr = 0;
        for(int i=0; i<7; i++){
            for(int j=0; j<32; j++){
                words[i] <<= 1;
                if(currMessage[ptr]){
                    words[i]++;
                }
                ptr++;
            }
        }

        for(int i=0; i<7; i++){
            words[i] ^= PADS[i];
        }
        messageQueue.add(new Transaction(wager, words));
        resetMessage();
        return;
}static Direction[] directions = {Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
static int[] PADS = {-1016996230, -110260579, -1608604611, 1994246809, 1665065435, 422836453, 325111185};
static RobotType[] robot_types = {RobotType.HQ, //0
        RobotType.MINER, //1
        RobotType.REFINERY, //2
        RobotType.VAPORATOR, //3
        RobotType.DESIGN_SCHOOL, //4
        RobotType.FULFILLMENT_CENTER, //5
        RobotType.LANDSCAPER, //6
        RobotType.DELIVERY_DRONE, //7
        RobotType.NET_GUN //8
};
static RobotController rc;
static int turnCount;
static int birthRound;  //What round was I born on?
static boolean[] currMessage;
static LinkedList<Transaction> messageQueue = new LinkedList<Transaction>();
static int messagePtr;  //What index in currMessage is my "cursor" at?
static MapLocation locHQ;   //Where is my HQ?
static boolean sentInfo;    //Sent info upon spawn
static int type;    //Integer from 0 to 8, index of robot_types
static int base_wager = 2;
static int enemy_msg_cnt;   //How many enemy messages went through last round?
static int enemy_msg_sum;   //Total wagers of enemy messages last round.


static void startLife(){
    System.out.println("Got created.");

    switch (rc.getType()) {
        case HQ:                 type=0;initHq();    break;
        case MINER:              type=1;    break;
        case REFINERY:           type=2;    break;
        case VAPORATOR:          type=3;    break;
        case DESIGN_SCHOOL:      type=4;    break;
        case FULFILLMENT_CENTER: type=5;    break;
        case LANDSCAPER:         type=6;    break;
        case DELIVERY_DRONE:     type=7;    break;
        case NET_GUN:            type=8;    break;
    }

    birthRound = rc.getRoundNum();
    resetMessage();
}

static void startTurn() throws GameActionException{
    turnCount = rc.getRoundNum()-birthRound+1;

    //process all messages for the previous round
    if(rc.getRoundNum() > 1) {
        enemy_msg_cnt = 0;
        enemy_msg_sum = 0;
        for (Transaction t : rc.getBlock(rc.getRoundNum() - 1)){
            processMessage(t);
        }
        if(enemy_msg_cnt > 0){
            base_wager = ((enemy_msg_sum/enemy_msg_cnt + 1) + base_wager)/2;
        }else{
            base_wager *= .8;
        }
        base_wager = Math.max(base_wager, 1);
    }

    if(!sentInfo){
        writeMessage(1, new int[]{type, rc.getID()});
        addMessageToQueue();
        sentInfo = true;
    }
}

static void endTurn() throws GameActionException{
    /*submits stuff from messageQueue*/
    while(messageQueue.size() > 0 && messageQueue.get(0).getCost() <= rc.getTeamSoup()){
        rc.submitTransaction(messageQueue.get(0).getMessage(), messageQueue.get(0).getCost());
        messageQueue.remove(0);
    }
}static void runMiner() throws GameActionException {
    for (Direction dir : directions)
        if (tryDeliver(dir))
            System.out.println("I delivered soup!");

    for (Direction dir : directions)
        if (tryMine(dir))
            System.out.println("I mined soup! " + rc.getSoupCarrying());
}
/**
 * Attempts to mine soup in a given direction.
 *
 * @param dir The intended direction of mining
 * @return true if a move was performed
 * @throws GameActionException
 */
static boolean tryMine(Direction dir) throws GameActionException {
    if (rc.isReady() && rc.canMineSoup(dir)) {
        rc.mineSoup(dir);
        return true;
    } else return false;
}

/**
 * Attempts to deliver soup in a given direction.
 *
 * @param dir The intended direction of refining
 * @return true if a move was performed
 * @throws GameActionException
 */
static boolean tryDeliver(Direction dir) throws GameActionException {
    if (rc.isReady() && rc.canDepositSoup(dir)) {
        rc.depositSoup(dir, rc.getSoupCarrying());
        return true;
    } else return false;
}static void runLandscaper() throws GameActionException {

}
static void runDeliveryDrone() throws GameActionException {

}
static void runRefinery() throws GameActionException {

}
static void runVaporator() throws GameActionException {

}
static void runDesignSchool() throws GameActionException {

}
static void runFulfillmentCenter() throws GameActionException {

}
static void runNetGun() throws GameActionException {

}
static int builtMiners;
static boolean hq_sentLoc;
static ArrayList<ArrayList<Unit> > units;

static void initHq() {
	units = new ArrayList<ArrayList<Unit> >(10);
	for(int i=0; i<10; i++){
		units.add(i,new ArrayList<Unit>());
	}
}

static void runHq() throws GameActionException {
	if(!hq_sentLoc){
		writeMessage(0, new int[]{rc.getLocation().x, rc.getLocation().y});
		addMessageToQueue();
		hq_sentLoc = true;
	}
	if (builtMiners < 2) {
		for (Direction dir : directions) {
			if (rc.canBuildRobot(RobotType.MINER, dir)) {
				rc.buildRobot(RobotType.MINER, dir);
				builtMiners++;
			}
		}
	}
}

static class Unit{
	/*HQ uses this class to keep track of all of our units.*/
	public int type;
	public int id;
	public MapLocation lastSent;

	public Unit(int t, int id){
		this.type = t;
		this.id = id;
	}

	public String toString(){
		return robot_types[type] + " (" + id + ")";
	}
}
}
